// üìå –î–∞–Ω–æ —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ N (>0) –∏ —Å–∏–º–≤–æ–ª—ã c1 –∏ c2.
// üìå –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª–∏–Ω—ã N, –∫–æ—Ç–æ—Ä–∞—è
// —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —á–µ—Ä–µ–¥—É—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤ c1 –∏ c2, –Ω–∞—á–∏–Ω–∞—è —Å c1.

package Lesson2;

public class AlternatingChars {
      public static void main(String[] args) {
            int n = 500_000;
            char c1 = 'x';
            char c2 = 'y';
            
            long start = System.currentTimeMillis();
            alternatingCharsString(n, c1, c2);
            System.out.println(System.currentTimeMillis() - start);
            
            System.out.println();
            
            start = System.currentTimeMillis();
            alternatingCharsSb(n, c1, c2);
            System.out.println(System.currentTimeMillis() - start);
            
            
            }
            
            public static String alternatingCharsString(int n, char c1, char c2) {
            String str = "";
            for (int i = 0; i < n / 2; i++) {
            str += Character.toString(c1) + Character.toString(c2);
            }
            return str;
            }
            
            public static String alternatingCharsSb(int n, char c1, char c2) {
            
            StringBuilder sb = new StringBuilder(n);
            
            for (int i = 0; i < n / 2; i++) {
            sb.append(c1).append(c2);
            }
            return sb.toString();
            }
}
